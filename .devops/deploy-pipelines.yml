# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'APP_NAME'
    displayName: 'Application to deploy'
    type: string
    values:
      - arc-be


trigger:
  branches:
    include:
      - develop
      - uat
      - main
  paths:
    include:
      - src/*
      - build.gradle.kts
      - helm/*
      - Dockerfile
      - settings.gradle.kts

pr: none

resources:
  repositories:
    - repository: self
    - repository: templates
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.8.0
      endpoint: 'azure-devops-github-ro'

variables:

  #  vmImageNameDefault: 'ubuntu-latest'
  vmImageNameDefault: ubuntu-22.04

  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  deployNamespace: '$(DEPLOY_NAMESPACE)'
  helmReleaseName : '$(HELM_RELEASE_NAME)'
  canDeploy: true

  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/uat') }}:
    environment: 'UAT'
    dockerRegistryName: '$(UAT_CONTAINER_REGISTRY_NAME)'
    dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(UAT_AGENT_POOL)
    postmanEnvFile: arc_UAT.postman_environment.json

  ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    environment: 'PROD'
    dockerRegistryName: '$(PROD_CONTAINER_REGISTRY_NAME)'
    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(PROD_AGENT_POOL)

  ${{ else }}:
    environment: 'DEV'
    dockerRegistryName: '$(DEV_CONTAINER_REGISTRY_NAME)'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(DEV_AGENT_POOL)
    postmanEnvFile: arc_DEV.postman_environment.json

  DOCKER_BUILDKIT: 1

stages:
  - stage: 'stage_info'
    condition: eq(variables.canDeploy, true)
    displayName: 'Get project app version'
    jobs:
      - job: job_info
        displayName: Get App Info
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Bash@3
            displayName: Get app version
            name: getAppVersion
            condition: and(succeeded(), eq(variables.canDeploy, true))
            inputs:
              targetType: 'inline'
              script: |
                ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
                cat build.gradle.kts
                version=$(cat build.gradle.kts | grep "version = .*" | cut -d"\"" -f2)
                echo "Building $version version"
                echo "##vso[task.setvariable variable=appVersion;isOutput=true]$version"
              failOnStderr: true

  - stage: stage_deploy
    displayName: 'Deploy to ${{ variables.environment }} K8S'
    dependsOn: ['stage_info']
    variables:
      appVersion: $[ stageDependencies.stage_info.job_info.outputs['getAppVersion.appVersion'] ]
    condition: and(succeeded(), eq(variables.canDeploy, true))
    jobs:
      - deployment: job_deploy
        displayName: 'Deploy'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    echo 'microservice-chart:
                       podAnnotations:
                          "build/buildNumber": "$(Build.BuildNumber)"
                          "build/appVersion": "$(appVersion)"
                          "build/sourceVersion": "$(Build.SourceVersion)"' > buildMetadata.yaml
                  displayName: Writing build metadata

                - template: templates/helm-microservice-chart-deploy/template.yaml@templates
                  parameters:
                    DO_DEPLOY: true
                    ENV: '$(environment)'
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: '$(deployNamespace)'
                    APP_NAME: ${{ variables.helmReleaseName }}
                    VALUE_FILE: "helm/values-lower(${{ variables.environment }}).yaml"
                    DEPLOY_VERSION: v1
                    ARGUMENTS: --timeout 5m0s --values buildMetadata.yaml
  - stage: Test_e2e
    displayName: 'Test_e2e_on_${{ variables.environment }}'
    condition: or(eq(variables.environment, 'DEV'), eq(variables.environment, 'UAT'))
    jobs:
      - job: 'Run_Postman_collection_on_${{ variables.environment }}'
        displayName: 'Run Postman collection on ${{ variables.environment }}'
        pool:
          name: $(selfHostedAgentPool)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x'
          - task: Npm@1.238.1
            displayName: Install newman
            inputs:
              command: custom
              customCommand: install -g newman
          - task: DownloadSecureFile@1
            displayName: 'download postman environment'
            name: postman_env
            inputs:
              secureFile: $(postmanEnvFile)
          - task: CmdLine@2
            displayName: Run newman
            continueOnError: true # Useful to avoid the skipping of result publishing task
            inputs:
              script: newman run postman/pagopa-arc-E2E.postman_collection.json -e $(postman_env.secureFilePath) --reporters cli,junit --reporter-junit-export result/test-result.xml
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/result/'
              testRunTitle: 'Publish Newman Test Results'
