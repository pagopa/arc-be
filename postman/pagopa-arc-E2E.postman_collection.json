{
  "info": {
    "_postman_id": "7eb50a7c-85f5-45bd-a880-bf5a714a87e7",
    "name": "ARC collection e2e",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "26204012"
  },
  "item": [
    {
      "name": "0. Health",
      "item": [
        {
          "name": "Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "  pm.test(\"[GET Actuator Health Liveness], expected httpStatus: 200\", () => {\r",
                  "        pm.response.to.have.status(200);\r",
                  "    })\r",
                  "\r",
                  "    pm.test(\"[GET Actuator Health Liveness] - When Actuator Health Liveness is called, the status is returned\", () => {\r",
                  "        let jsonResponse = pm.response.json();\r",
                  "\r",
                  "        pm.expect(jsonResponse.status).to.eq(\"UP\");\r",
                  "    })"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrlCittadini}}/health/v1",
              "host": [
                "{{baseUrlCittadini}}"
              ],
              "path": [
                "health",
                "v1"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Notices",
      "item": [
        {
          "name": "Happy Case",
          "item": [
            {
              "name": "setup",
              "item": [
                {
                  "name": "getAccessToken",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "pm.environment.set(\"accessToken\", jsonResponse.accessToken);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArcInternal}}/auth/testuser",
                      "host": [
                        "{{baseurlArcInternal}}"
                      ],
                      "path": [
                        "auth",
                        "testuser"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Case 1",
              "item": [
                {
                  "name": "Send Event to Biz-Events Case 1",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Send event to Biz-Events, expected httpStatus: 201\", () => {\r",
                          "    pm.response.to.have.status(201);\r",
                          "})\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "//event id\r",
                          "let firstNums = (Math.floor(Math.random()*(1000000000000000000 - 1)+1)).toString().padStart(18,'0');\r",
                          "let secondNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let thirthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fourthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fifthNums = (Math.floor(Math.random()*(1000 - 1)+1)).toString().padStart(3,'0');\r",
                          "\r",
                          "let eventId = String(\"tst2.\" + firstNums + \"-\" + secondNums + \"-\" + thirthNums + \"-\" + fourthNums + \"-\" + fifthNums + \"-\" + \"0\");\r",
                          "pm.collectionVariables.set(\"eventId\", eventId);\r",
                          "\r",
                          "//Format: YYYY-MM-DDTHH:mm:ss[Z]\r",
                          "let moment = require('moment');\r",
                          "let nowFormatted =  String(moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));\r",
                          "pm.collectionVariables.set(\"noticeDate\", nowFormatted);\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(100000 - 1)+1);\r",
                          "let amountEur = amount / 100 ;\r",
                          "pm.collectionVariables.set(\"amountEur\",amountEur);\r",
                          "pm.collectionVariables.set(\"amountCents\",amount);\r",
                          "\r",
                          "//Random fee\r",
                          "let fee = Math.floor(Math.random()*(100 - 1)+1);\r",
                          "pm.collectionVariables.set(\"fee\",fee);\r",
                          "\r",
                          "//total Amount\r",
                          "let totalAmount = amount + fee;\r",
                          "pm.collectionVariables.set(\"totalAmount\", totalAmount);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "{{sharedAccessSignature}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{eventId}}\",\r\n    \"version\": \"2\",\r\n    \"complete\": \"true\",\r\n    \"missingInfo\": [],\r\n    \"debtorPosition\": {\r\n        \"modelType\": \"1\",\r\n        \"iuv\": \"960000000094659945\",\r\n        \"iur\": \"2452462462464264264\"\r\n    },\r\n      \"creditor\": {\r\n        \"idPA\": \"00493410583\",\r\n        \"idBrokerPA\": \"00493410583\",\r\n        \"idStation\": \"00493410583_02\",\r\n        \"companyName\": \"ACI Automobile Club Italia\",\r\n        \"officeName\": \"ACI OfficeName\"\r\n    },\r\n    \"psp\": {\r\n        \"idPsp\": \"BPPNIT2PXXX\",\r\n        \"idBrokerPsp\": \"03339200374\",\r\n        \"idChannel\": \"03339200374_01\",\r\n        \"psp\": \"Worldline Merchant Services Italia S.p.A.\"\r\n    },\r\n    \"debtor\": {\r\n        \"fullName\": \"MARCO POLO\",\r\n        \"entityUniqueIdentifierType\": \"F\",\r\n        \"entityUniqueIdentifierValue\": \"{{CF_MOCK_BE_ARC}}\"\r\n    },\r\n    \"paymentInfo\": {\r\n        \"paymentDateTime\": \"{{noticeDate}}\",\r\n        \"paymentToken\": \"223F665500001336354\",\r\n        \"amount\": {{amountEur}},\r\n        \"fee\": \"0.0\",\r\n        \"paymentMethod\": \"PO\",\r\n        \"remittanceInformation\": \"pagamento\"\r\n    },\r\n    \"transactionDetails\": {\r\n        \"origin\": \"PaymentManager\",\r\n        \"transaction\": {\r\n            \"idTransaction\": \"134528954\",\r\n            \"transactionId\": \"134528954\",\r\n            \"grandTotal\": {{totalAmount}},\r\n            \"amount\": {{amountCents}},\r\n            \"fee\": {{fee}},\r\n            \"transactionStatus\": \"Confermato\",\r\n            \"accountingStatus\": \"Contabilizzato\",\r\n            \"rrn\": \"223560110624\",\r\n            \"authorizationCode\": \"00\",\r\n            \"creationDate\": \"{{noticeDate}}\",\r\n            \"numAut\": \"250863\",\r\n            \"accountCode\": \"0037r972892475982475842\",\r\n            \"psp\": {\r\n                \"idChannel\": \"05963231005_01_ONUS\",\r\n                \"businessName\": \"Worldline Merchant Services Italia S.p.A.\",\r\n                \"serviceName\": \"Pagamento con Carte\"\r\n            },\r\n            \"origin\": \"IO\" // autenticato IO\r\n        },\r\n        \"wallet\": {\r\n            \"idWallet\": 125714007,\r\n            \"walletType\": \"Card\",\r\n            \"enableableFunctions\": [\r\n                \"pagoPA\",\r\n                \"BPD\",\r\n                \"FA\"\r\n            ],\r\n            \"pagoPa\": true,\r\n            \"onboardingChannel\": \"IO\",\r\n            \"favourite\": false,\r\n            \"createDate\": \"{{noticeDate}}\",\r\n            \"info\": {\r\n                \"type\": \"CardInfo\",\r\n                \"holder\": \"MARCO POLO\",\r\n                \"blurredNumber\": \"0403\",\r\n                \"hashPan\": \"e88aadfd9f40e1482615fd3c8c44f05c53f93aed1bcea69e82b3e5e27668f822\",\r\n                \"expireMonth\": \"06\",\r\n                \"expireYear\": \"2026\",\r\n                \"brand\": \"MASTERCARD\",\r\n                \"brandLogo\": \"https://wisp2.pagopa.gov.it/wallet/assets/img/creditcard/carta_visa.png\"\r\n            }\r\n        },\r\n        \"user\": {\r\n            \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\r\n            \"userId\": \"677676786\",\r\n            \"userStatus\": \"11\",\r\n            \"userStatusDescription\": \"REGISTERED_SPID\",\r\n            \"name\": \"MARCO\",\r\n            \"surname\": \"POLO\"\r\n        },\r\n        \"info\": {\r\n            \"brand\": \"MASTERCARD\",\r\n            \"brandLogo\": \"https://checkout.pagopa.it/assets/creditcard/mastercard.png\",\r\n            \"clientId\": \"CHECKOUT_FAKE\",\r\n            \"paymentMethodName\": \"CARDS\",\r\n            \"type\": \"CP\"\r\n        }\r\n    },\r\n    \"transferList\": [\r\n        {\r\n            \"fiscalCodePA\": \"00493410583\",\r\n            \"companyName\": \"ACI Automobile Club Italia\",\r\n            \"amount\": {{amountEur}},\r\n            \"transferCategory\": \"9/0301105TS/3/CB617RP\",\r\n            \"remittanceInformation\": \"/RFB/9600000000/TXT/CB617RP-Mag2022/Apr2023--EC Lorem-E. 261,92 (san 4,91 int 0,95)\"\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "https://{{namespace}}.servicebus.windows.net/{{eventHub}}/messages?timeout=60&api-version=2014-01",
                      "protocol": "https",
                      "host": [
                        "{{namespace}}",
                        "servicebus",
                        "windows",
                        "net"
                      ],
                      "path": [
                        "{{eventHub}}",
                        "messages"
                      ],
                      "query": [
                        {
                          "key": "timeout",
                          "value": "60"
                        },
                        {
                          "key": "api-version",
                          "value": "2014-01"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notices list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "\r",
                          "if(jsonResponse.notices.length === 0 || !jsonResponse.notices.some(n => n.eventId == pm.collectionVariables.get('eventId'))){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notices list - Case 1], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notices list - Case 1] - When you get the notices list, ARC return a notices list with last event injected\", () => {\r",
                          "        pm.expect(jsonResponse.notices).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let notices = jsonResponse.notices.find(n => n.eventId == pm.collectionVariables.get('eventId'));\r",
                          "\r",
                          "        if(notices.eventId == pm.collectionVariables.get('eventId')){\r",
                          "            pm.expect(notices.amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "            pm.expect(notices.isCart).to.eq(false);\r",
                          "            pm.expect(notices.paidByMe).to.eq(true);\r",
                          "            pm.expect(notices.registeredToMe).to.eq(true);\r",
                          "        }else {\r",
                          "            pm.expect.fail(\"The event is not present\");\r",
                          "        }\r",
                          "    })\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notice Details",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "\r",
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout,1000);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notice details - Case 1], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice details - Case 1] - When you get the notice details, ARC return a notice details\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "\r",
                          "        pm.expect(jsonResponse.infoNotice.eventId).to.eq(pm.collectionVariables.get('eventId'));\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"walletInfo\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"paymentMethod\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"payer\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"origin\");\r",
                          "\r",
                          "        pm.expect(jsonResponse.infoNotice.amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "        pm.expect(jsonResponse.infoNotice.totalAmount).to.eq(pm.collectionVariables.get('totalAmount'));\r",
                          "        pm.expect(jsonResponse.infoNotice.pspName).to.eq(\"Worldline Merchant Services Italia S.p.A.\")\r",
                          "        pm.expect(jsonResponse.infoNotice.payer.name).not.eq(null);\r",
                          "        pm.expect(jsonResponse.infoNotice.payer.taxCode).to.eq(pm.environment.get('CF_MOCK_BE_ARC'));\r",
                          "\r",
                          "        pm.expect(jsonResponse.carts).to.have.length(1);\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"subject\");\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"refNumberType\");\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"refNumberValue\");\r",
                          "        pm.expect(jsonResponse.carts[0].amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "        pm.expect(jsonResponse.carts[0].debtor.taxCode).to.eq(pm.environment.get('CF_MOCK_BE_ARC'));\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/{{eventId}}",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "{{eventId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notice receipt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout,1500); \r",
                          "}else{\r",
                          "    pm.test(\"[Get notice receipt - Case 1], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice receipt - Case 1] - When you get the notice receipt, ARC return a notice receipt\", () => {\r",
                          "        pm.response.to.have.header(\"Content-Type\", \"application/pdf\");\r",
                          "        console.log(pm.response.headers)\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/{{eventId}}/receipt",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "{{eventId}}",
                        "receipt"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Disable notices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Disable event from Biz-Events, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-Key-bizevents-Notices}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-fiscal-code",
                        "value": "{{CF_MOCK_BE_ARC}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlBizEventsNotices}}/paids/{{eventId}}/disable",
                      "host": [
                        "{{baseUrlBizEventsNotices}}"
                      ],
                      "path": [
                        "paids",
                        "{{eventId}}",
                        "disable"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Case 2",
              "item": [
                {
                  "name": "Send Event to Biz-Events Case 2",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Send event to Biz-Events, expected httpStatus: 201\", () => {\r",
                          "    pm.response.to.have.status(201);\r",
                          "})\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "//event id\r",
                          "let firstNums = (Math.floor(Math.random()*(1000000000000000000 - 1)+1)).toString().padStart(18,'0');\r",
                          "let secondNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let thirthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fourthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fifthNums = (Math.floor(Math.random()*(1000 - 1)+1)).toString().padStart(3,'0');\r",
                          "\r",
                          "let eventId = String(\"tst2.\" + firstNums + \"-\" + secondNums + \"-\" + thirthNums + \"-\" + fourthNums + \"-\" + fifthNums + \"-\" + \"0\");\r",
                          "pm.collectionVariables.set(\"eventId\", eventId);\r",
                          "\r",
                          "//Format: YYYY-MM-DDTHH:mm:ss[Z]\r",
                          "let moment = require('moment');\r",
                          "let nowFormatted =  String(moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));\r",
                          "pm.collectionVariables.set(\"noticeDate\", nowFormatted);\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(100000 - 1)+1);\r",
                          "let amountEur = amount / 100 ;\r",
                          "pm.collectionVariables.set(\"amountEur\",amountEur);\r",
                          "pm.collectionVariables.set(\"amountCents\",amount);\r",
                          "\r",
                          "//Random fee\r",
                          "let fee = Math.floor(Math.random()*(100 - 1)+1);\r",
                          "pm.collectionVariables.set(\"fee\",fee);\r",
                          "\r",
                          "//total Amount\r",
                          "let totalAmount = amount + fee;\r",
                          "pm.collectionVariables.set(\"totalAmount\", totalAmount);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "{{sharedAccessSignature}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{eventId}}\",\r\n    \"version\": \"2\",\r\n    \"complete\": \"true\",\r\n    \"missingInfo\": [],\r\n    \"debtorPosition\": {\r\n        \"modelType\": \"1\",\r\n        \"iuv\": \"960000000094659975\",\r\n        \"iur\": \"2452462462464264264\"\r\n    },\r\n    \"creditor\": {\r\n        \"idPA\": \"00493410583\",\r\n        \"idBrokerPA\": \"00493410583\",\r\n        \"idStation\": \"00493410583_02\",\r\n        \"companyName\": \"ACI Automobile Club Italia\",\r\n        \"officeName\": \"ACI OfficeName\"\r\n    },\r\n    \"psp\": {\r\n        \"idPsp\": \"BPPNIT2PXXX\",\r\n        \"idBrokerPsp\": \"03339200374\",\r\n        \"idChannel\": \"03339200374_01\",\r\n        \"psp\": \"Worldline Merchant Services Italia S.p.A.\"\r\n    },\r\n    \"debtor\": {\r\n        \"fullName\": \"CITTADINO DEBTOR\",\r\n        \"entityUniqueIdentifierType\": \"F\",\r\n        \"entityUniqueIdentifierValue\": \"{{fakeUser1}}\"\r\n    },\r\n    \"paymentInfo\": {\r\n        \"paymentDateTime\": \"{{noticeDate}}\",\r\n        \"paymentToken\": \"223F665500001336354\",\r\n        \"amount\": {{amountEur}},\r\n        \"fee\": \"0.0\",\r\n        \"paymentMethod\": \"PO\",\r\n        \"remittanceInformation\": \"pagamento\"\r\n    },\r\n    \"transactionDetails\": {\r\n        \"origin\": \"PaymentManager\",\r\n        \"transaction\": {\r\n            \"idTransaction\": \"134528954\",\r\n            \"transactionId\": \"134528954\",\r\n            \"grandTotal\": {{totalAmount}},\r\n            \"amount\": {{amountCents}},\r\n            \"fee\": {{fee}},\r\n            \"transactionStatus\": \"Confermato\",\r\n            \"accountingStatus\": \"Contabilizzato\",\r\n            \"rrn\": \"223560110624\",\r\n            \"authorizationCode\": \"00\",\r\n            \"creationDate\": \"{{noticeDate}}\",\r\n            \"numAut\": \"250863\",\r\n            \"accountCode\": \"0037r972892475982475842\",\r\n            \"psp\": {\r\n                \"idChannel\": \"05963231005_01_ONUS\",\r\n                \"businessName\": \"Worldline Merchant Services Italia S.p.A.\",\r\n                \"serviceName\": \"Pagamento con Carte\"\r\n            },\r\n            \"origin\": \"IO\" // autenticato IO\r\n        },\r\n        \"wallet\": {\r\n            \"idWallet\": 125714007,\r\n            \"walletType\": \"Card\",\r\n            \"enableableFunctions\": [\r\n                \"pagoPA\",\r\n                \"BPD\",\r\n                \"FA\"\r\n            ],\r\n            \"pagoPa\": true,\r\n            \"onboardingChannel\": \"IO\",\r\n            \"favourite\": false,\r\n            \"createDate\": \"{{noticeDate}}\",\r\n            \"info\": {\r\n                \"type\": \"CardInfo\",\r\n                \"holder\": \"MARCO POLO\",\r\n                \"blurredNumber\": \"0403\",\r\n                \"hashPan\": \"e88aadfd9f40e1482615fd3c8c44f05c53f93aed1bcea69e82b3e5e27668f822\",\r\n                \"expireMonth\": \"06\",\r\n                \"expireYear\": \"2026\",\r\n                \"brand\": \"MASTERCARD\",\r\n                \"brandLogo\": \"https://wisp2.pagopa.gov.it/wallet/assets/img/creditcard/carta_visa.png\"\r\n            }\r\n        },\r\n        \"user\": {\r\n            \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\r\n            \"userId\": \"677676786\",\r\n            \"userStatus\": \"11\",\r\n            \"userStatusDescription\": \"REGISTERED_SPID\",\r\n            \"name\": \"MARCO\",\r\n            \"surname\": \"POLO\"\r\n        },\r\n        \"info\": {\r\n            \"brand\": \"MASTERCARD\",\r\n            \"brandLogo\": \"https://checkout.pagopa.it/assets/creditcard/mastercard.png\",\r\n            \"clientId\": \"CHECKOUT_FAKE\",\r\n            \"paymentMethodName\": \"CARDS\",\r\n            \"type\": \"CP\"\r\n        }\r\n    },\r\n    \"transferList\": [\r\n        {\r\n            \"fiscalCodePA\": \"00493410583\",\r\n            \"companyName\": \"ACI Automobile Club Italia\",\r\n            \"amount\": {{amountEur}},\r\n            \"transferCategory\": \"9/0301105TS/3/CB617RP\",\r\n            \"remittanceInformation\": \"/RFB/9600000000/TXT/CB617RP-Mag2022/Apr2023--EC Lorem-E. 261,92 (san 4,91 int 0,95)\"\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "https://{{namespace}}.servicebus.windows.net/{{eventHub}}/messages?timeout=60&api-version=2014-01",
                      "protocol": "https",
                      "host": [
                        "{{namespace}}",
                        "servicebus",
                        "windows",
                        "net"
                      ],
                      "path": [
                        "{{eventHub}}",
                        "messages"
                      ],
                      "query": [
                        {
                          "key": "timeout",
                          "value": "60"
                        },
                        {
                          "key": "api-version",
                          "value": "2014-01"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notices list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "\r",
                          "if(jsonResponse.notices.length === 0 || !jsonResponse.notices.some(n => n.eventId == pm.collectionVariables.get('eventId'))){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notices list - Case 2], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notices list - Case 2] - When you get the notices list, ARC return a notices list with last event injected\", () => {\r",
                          "        pm.expect(jsonResponse.notices).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let notices = jsonResponse.notices.find(n => n.eventId == pm.collectionVariables.get('eventId'));\r",
                          "\r",
                          "        if(notices.eventId == pm.collectionVariables.get('eventId')){\r",
                          "            pm.expect(notices.amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "            pm.expect(notices.isCart).to.eq(false);\r",
                          "            pm.expect(notices.paidByMe).to.eq(true);\r",
                          "            pm.expect(notices.registeredToMe).to.eq(false);\r",
                          "        }else {\r",
                          "            pm.expect.fail(\"The event is not present\");\r",
                          "        }\r",
                          "    })\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notice Details",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "\r",
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout,1000);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notice details - Case 2], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice details - Case 2] - When you get the notice details, ARC return a notice details\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "\r",
                          "        pm.expect(jsonResponse.infoNotice.eventId).to.eq(pm.collectionVariables.get('eventId'));\r",
                          "        pm.expect(jsonResponse.carts).to.have.length(1);\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"walletInfo\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"paymentMethod\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"payer\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"origin\");\r",
                          "\r",
                          "        pm.expect(jsonResponse.infoNotice.amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "        pm.expect(jsonResponse.infoNotice.totalAmount).to.eq(pm.collectionVariables.get('totalAmount'));\r",
                          "        pm.expect(jsonResponse.infoNotice.pspName).to.eq(\"Worldline Merchant Services Italia S.p.A.\")\r",
                          "        pm.expect(jsonResponse.infoNotice.payer.name).not.eq(null);\r",
                          "        pm.expect(jsonResponse.infoNotice.payer.taxCode).to.eq(pm.environment.get('CF_MOCK_BE_ARC'));\r",
                          "\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"subject\");\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"refNumberType\");\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"refNumberValue\");\r",
                          "        pm.expect(jsonResponse.carts[0].amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "        pm.expect(jsonResponse.carts[0].debtor.taxCode).to.eq(pm.environment.get('fakeUser1'));\r",
                          "        \r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/{{eventId}}",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "{{eventId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notice receipt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout,1500); \r",
                          "}else{\r",
                          "    pm.test(\"[Get notice receipt - Case 2], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice receipt - Case 2] - When you get the notice receipt, ARC return a notice receipt\", () => {\r",
                          "        pm.response.to.have.header(\"Content-Type\", \"application/pdf\");\r",
                          "        console.log(pm.response.headers)\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/{{eventId}}/receipt",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "{{eventId}}",
                        "receipt"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Disable notices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Disable event from Biz-Events, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-Key-bizevents-Notices}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-fiscal-code",
                        "value": "{{CF_MOCK_BE_ARC}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlBizEventsNotices}}/paids/{{eventId}}/disable",
                      "host": [
                        "{{baseUrlBizEventsNotices}}"
                      ],
                      "path": [
                        "paids",
                        "{{eventId}}",
                        "disable"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Disable notices User 2",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Disable event from Biz-Events, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-Key-bizevents-Notices}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-fiscal-code",
                        "value": "{{fakeUser1}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlBizEventsNotices}}/paids/{{eventId}}/disable",
                      "host": [
                        "{{baseUrlBizEventsNotices}}"
                      ],
                      "path": [
                        "paids",
                        "{{eventId}}",
                        "disable"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Case 3",
              "item": [
                {
                  "name": "Send Event to Biz-Events Case 3",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Send event to Biz-Events, expected httpStatus: 201\", () => {\r",
                          "    pm.response.to.have.status(201);\r",
                          "})\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "//event id\r",
                          "let firstNums = (Math.floor(Math.random()*(1000000000000000000 - 1)+1)).toString().padStart(18,'0');\r",
                          "let secondNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let thirthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fourthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fifthNums = (Math.floor(Math.random()*(1000 - 1)+1)).toString().padStart(3,'0');\r",
                          "\r",
                          "let eventId = String(\"tst2.\" + firstNums + \"-\" + secondNums + \"-\" + thirthNums + \"-\" + fourthNums + \"-\" + fifthNums + \"-\" + \"0\");\r",
                          "pm.collectionVariables.set(\"eventId\", eventId);\r",
                          "\r",
                          "//Format: YYYY-MM-DDTHH:mm:ss[Z]\r",
                          "let moment = require('moment');\r",
                          "let nowFormatted =  String(moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));\r",
                          "pm.collectionVariables.set(\"noticeDate\", nowFormatted);\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(100000 - 1)+1);\r",
                          "let amountEur = amount / 100 ;\r",
                          "pm.collectionVariables.set(\"amountEur\",amountEur);\r",
                          "pm.collectionVariables.set(\"amountCents\",amount);\r",
                          "\r",
                          "//Random fee\r",
                          "let fee = Math.floor(Math.random()*(100 - 1)+1);\r",
                          "pm.collectionVariables.set(\"fee\",fee);\r",
                          "\r",
                          "//total Amount\r",
                          "let totalAmount = amount + fee;\r",
                          "pm.collectionVariables.set(\"totalAmount\", totalAmount);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "{{sharedAccessSignature}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{eventId}}\",\r\n    \"version\": \"2\",\r\n    \"complete\": \"true\",\r\n    \"missingInfo\": [],\r\n    \"debtorPosition\": {\r\n        \"modelType\": \"1\",\r\n        \"iuv\": \"960000000094659975\",\r\n        \"iur\": \"2452462462464264264\"\r\n    },\r\n    \"creditor\": {\r\n        \"idPA\": \"00493410583\",\r\n        \"idBrokerPA\": \"00493410583\",\r\n        \"idStation\": \"00493410583_02\",\r\n        \"companyName\": \"ACI Automobile Club Italia\",\r\n        \"officeName\": \"ACI OfficeName\"\r\n    },\r\n    \"psp\": {\r\n        \"idPsp\": \"BPPNIT2PXXX\",\r\n        \"idBrokerPsp\": \"03339200374\",\r\n        \"idChannel\": \"03339200374_01\",\r\n        \"psp\": \"Worldline Merchant Services Italia S.p.A.\"\r\n    },\r\n    \"debtor\": {\r\n        \"fullName\": \"CITTADINO DEBTOR\",\r\n        \"entityUniqueIdentifierType\": \"F\",\r\n        \"entityUniqueIdentifierValue\": \"{{CF_MOCK_BE_ARC}}\"\r\n    },\r\n    \"payer\": {\r\n        \"fullName\": \"CITTADINO PAYER\",\r\n        \"entityUniqueIdentifierType\": \"F\",\r\n        \"entityUniqueIdentifierValue\": \"{{fakeUser1}}\"\r\n    },\r\n    \"paymentInfo\": {\r\n        \"paymentDateTime\": \"{{noticeDate}}\",\r\n        \"paymentToken\": \"223F665500001336354\",\r\n        \"amount\": {{amountEur}},\r\n        \"fee\": \"0.0\",\r\n        \"paymentMethod\": \"PO\",\r\n        \"remittanceInformation\": \"pagamento\"\r\n    },\r\n    \"transactionDetails\": {\r\n        \"origin\": \"PaymentManager\",\r\n        \"transaction\": {\r\n            \"idTransaction\": \"134528954\",\r\n            \"transactionId\": \"134528954\",\r\n            \"grandTotal\": {{totalAmount}},\r\n            \"amount\": {{amountCents}},\r\n            \"fee\": {{fee}},\r\n            \"transactionStatus\": \"Confermato\",\r\n            \"accountingStatus\": \"Contabilizzato\",\r\n            \"rrn\": \"223560110624\",\r\n            \"authorizationCode\": \"00\",\r\n            \"creationDate\": \"{{noticeDate}}\",\r\n            \"numAut\": \"250863\",\r\n            \"accountCode\": \"0037r972892475982475842\",\r\n            \"psp\": {\r\n                \"idChannel\": \"05963231005_01_ONUS\",\r\n                \"businessName\": \"Worldline Merchant Services Italia S.p.A.\",\r\n                \"serviceName\": \"Pagamento con Carte\"\r\n            },\r\n            \"origin\": \"IO\" // autenticato IO\r\n        },\r\n        \"wallet\": {\r\n            \"idWallet\": 125714007,\r\n            \"walletType\": \"Card\",\r\n            \"enableableFunctions\": [\r\n                \"pagoPA\",\r\n                \"BPD\",\r\n                \"FA\"\r\n            ],\r\n            \"pagoPa\": true,\r\n            \"onboardingChannel\": \"IO\",\r\n            \"favourite\": false,\r\n            \"createDate\": \"{{noticeDate}}\",\r\n            \"info\": {\r\n                \"type\": \"CardInfo\",\r\n                \"holder\": \"CITTADINO PAYER\",\r\n                \"blurredNumber\": \"0403\",\r\n                \"hashPan\": \"e88aadfd9f40e1482615fd3c8c44f05c53f93aed1bcea69e82b3e5e27668f822\",\r\n                \"expireMonth\": \"06\",\r\n                \"expireYear\": \"2026\",\r\n                \"brand\": \"MASTERCARD\",\r\n                \"brandLogo\": \"https://wisp2.pagopa.gov.it/wallet/assets/img/creditcard/carta_visa.png\"\r\n            }\r\n        },\r\n        \"info\": {\r\n            \"brand\": \"MASTERCARD\",\r\n            \"brandLogo\": \"https://checkout.pagopa.it/assets/creditcard/mastercard.png\",\r\n            \"clientId\": \"CHECKOUT_FAKE\",\r\n            \"paymentMethodName\": \"CARDS\",\r\n            \"type\": \"CP\"\r\n        }\r\n    },\r\n    \"transferList\": [\r\n        {\r\n            \"fiscalCodePA\": \"00493410583\",\r\n            \"companyName\": \"ACI Automobile Club Italia\",\r\n            \"amount\": {{amountEur}},\r\n            \"transferCategory\": \"9/0301105TS/3/CB617RP\",\r\n            \"remittanceInformation\": \"/RFB/9600000000/TXT/CB617RP-Mag2022/Apr2023--EC Lorem-E. 261,92 (san 4,91 int 0,95)\"\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "https://{{namespace}}.servicebus.windows.net/{{eventHub}}/messages?timeout=60&api-version=2014-01",
                      "protocol": "https",
                      "host": [
                        "{{namespace}}",
                        "servicebus",
                        "windows",
                        "net"
                      ],
                      "path": [
                        "{{eventHub}}",
                        "messages"
                      ],
                      "query": [
                        {
                          "key": "timeout",
                          "value": "60"
                        },
                        {
                          "key": "api-version",
                          "value": "2014-01"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notices list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "\r",
                          "if(jsonResponse.notices.length === 0 || !jsonResponse.notices.some(n => n.eventId == pm.collectionVariables.get('eventId'))){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notices list - Case 3], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notices list - Case 3] - When you get the notices list, ARC return a notices list with last event injected\", () => {\r",
                          "        pm.expect(jsonResponse.notices).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let notices = jsonResponse.notices.find(n => n.eventId == pm.collectionVariables.get('eventId'));\r",
                          "\r",
                          "        if(notices.eventId == pm.collectionVariables.get('eventId')){\r",
                          "            pm.expect(notices.amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "            pm.expect(notices.isCart).to.eq(false);\r",
                          "            pm.expect(notices.paidByMe).to.eq(false);\r",
                          "            pm.expect(notices.registeredToMe).to.eq(true);\r",
                          "        }else {\r",
                          "            pm.expect.fail(\"The event is not present\");\r",
                          "        }\r",
                          "    })\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notice Details",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "\r",
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout,10000);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notice details - Case 3], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice details - Case 3] - When you get the notice details, ARC return a notice details\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "\r",
                          "        pm.expect(jsonResponse.infoNotice.eventId).to.eq(pm.collectionVariables.get('eventId'));\r",
                          "        pm.expect(jsonResponse.carts).to.have.length(1);\r",
                          "        pm.expect(jsonResponse.infoNotice).not.to.have.property(\"walletInfo\");\r",
                          "        pm.expect(jsonResponse.infoNotice).not.to.have.property(\"paymentMethod\");\r",
                          "        pm.expect(jsonResponse.infoNotice).not.to.have.property(\"payer\");\r",
                          "        pm.expect(jsonResponse.infoNotice).to.have.property(\"origin\");\r",
                          "\r",
                          "        pm.expect(jsonResponse.infoNotice.amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "        pm.expect(jsonResponse.infoNotice.totalAmount).to.eq(pm.collectionVariables.get('totalAmount'));\r",
                          "        pm.expect(jsonResponse.infoNotice.pspName).to.eq(\"Worldline Merchant Services Italia S.p.A.\")\r",
                          "\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"subject\");\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"refNumberType\");\r",
                          "        pm.expect(jsonResponse.carts[0]).to.have.property(\"refNumberValue\");\r",
                          "        pm.expect(jsonResponse.carts[0].amount).to.eq(pm.collectionVariables.get('amountCents'));\r",
                          "        pm.expect(jsonResponse.carts[0].debtor.taxCode).to.eq(pm.environment.get('CF_MOCK_BE_ARC'));\r",
                          "        \r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/{{eventId}}",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "{{eventId}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notice receipt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout,1500); \r",
                          "}else{\r",
                          "    pm.test(\"[Get notice receipt - Case 3], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice receipt - Case 3] - When you get the notice receipt, ARC return a notice receipt\", () => {\r",
                          "        pm.response.to.have.header(\"Content-Type\", \"application/pdf\");\r",
                          "        console.log(pm.response.headers)\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/{{eventId}}/receipt",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "{{eventId}}",
                        "receipt"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Disable notices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Disable event from Biz-Events, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-Key-bizevents-Notices}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-fiscal-code",
                        "value": "{{CF_MOCK_BE_ARC}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlBizEventsNotices}}/paids/{{eventId}}/disable",
                      "host": [
                        "{{baseUrlBizEventsNotices}}"
                      ],
                      "path": [
                        "paids",
                        "{{eventId}}",
                        "disable"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Disable notices User 2",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Disable event from Biz-Events, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-Key-bizevents-Notices}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-fiscal-code",
                        "value": "{{fakeUser1}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlBizEventsNotices}}/paids/{{eventId}}/disable",
                      "host": [
                        "{{baseUrlBizEventsNotices}}"
                      ],
                      "path": [
                        "paids",
                        "{{eventId}}",
                        "disable"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Check Continuation-token",
              "item": [
                {
                  "name": "Send Event to Biz-Events",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Send event to Biz-Events, expected httpStatus: 201\", () => {\r",
                          "    pm.response.to.have.status(201);\r",
                          "})\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "//event id\r",
                          "let firstNums = (Math.floor(Math.random()*(1000000000000000000 - 1)+1)).toString().padStart(18,'0');\r",
                          "let secondNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let thirthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fourthNums = (Math.floor(Math.random()*(10000 - 1)+1)).toString().padStart(4,'0');\r",
                          "let fifthNums = (Math.floor(Math.random()*(1000 - 1)+1)).toString().padStart(3,'0');\r",
                          "\r",
                          "let eventId = String(\"tst2.\" + firstNums + \"-\" + secondNums + \"-\" + thirthNums + \"-\" + fourthNums + \"-\" + fifthNums + \"-\" + \"0\");\r",
                          "pm.collectionVariables.set(\"eventId\", eventId);\r",
                          "\r",
                          "//Format: YYYY-MM-DDTHH:mm:ss[Z]\r",
                          "let moment = require('moment');\r",
                          "let nowFormatted =  String(moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));\r",
                          "pm.collectionVariables.set(\"transactionDate\", nowFormatted);\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(100000 - 1)+1);\r",
                          "let amountEur = amount / 100 ;\r",
                          "pm.collectionVariables.set(\"amountEur\",amountEur);\r",
                          "pm.collectionVariables.set(\"amountCents\",amount);\r",
                          "\r",
                          "//Random fee\r",
                          "let fee = Math.floor(Math.random()*(100 - 1)+1);\r",
                          "pm.collectionVariables.set(\"fee\",fee);\r",
                          "\r",
                          "//total Amount\r",
                          "let totalAmount = amount + fee;\r",
                          "pm.collectionVariables.set(\"totalAmount\", totalAmount);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "{{sharedAccessSignature}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"{{eventId}}\",\r\n    \"version\": \"2\",\r\n    \"complete\": \"true\",\r\n    \"missingInfo\": [],\r\n    \"debtorPosition\": {\r\n        \"modelType\": \"1\",\r\n        \"iuv\": \"960000000094659945\",\r\n        \"iur\": \"2452462462464264264\"\r\n    },\r\n      \"creditor\": {\r\n        \"idPA\": \"00493410583\",\r\n        \"idBrokerPA\": \"00493410583\",\r\n        \"idStation\": \"00493410583_02\",\r\n        \"companyName\": \"ACI Automobile Club Italia\",\r\n        \"officeName\": \"ACI OfficeName\"\r\n    },\r\n    \"psp\": {\r\n        \"idPsp\": \"BPPNIT2PXXX\",\r\n        \"idBrokerPsp\": \"03339200374\",\r\n        \"idChannel\": \"03339200374_01\",\r\n        \"psp\": \"Worldline Merchant Services Italia S.p.A.\"\r\n    },\r\n    \"debtor\": {\r\n        \"fullName\": \"MARCO POLO\",\r\n        \"entityUniqueIdentifierType\": \"F\",\r\n        \"entityUniqueIdentifierValue\": \"{{CF_MOCK_BE_ARC}}\"\r\n    },\r\n    \"paymentInfo\": {\r\n        \"paymentDateTime\": \"{{transactionDate}}\",\r\n        \"paymentToken\": \"223F665500001336354\",\r\n        \"amount\": {{amountEur}},\r\n        \"fee\": \"0.0\",\r\n        \"paymentMethod\": \"PO\",\r\n        \"remittanceInformation\": \"pagamento\"\r\n    },\r\n    \"transactionDetails\": {\r\n        \"origin\": \"PaymentManager\",\r\n        \"transaction\": {\r\n            \"idTransaction\": \"134528954\",\r\n            \"transactionId\": \"134528954\",\r\n            \"grandTotal\": {{totalAmount}},\r\n            \"amount\": {{amountCents}},\r\n            \"fee\": {{fee}},\r\n            \"transactionStatus\": \"Confermato\",\r\n            \"accountingStatus\": \"Contabilizzato\",\r\n            \"rrn\": \"223560110624\",\r\n            \"authorizationCode\": \"00\",\r\n            \"creationDate\": \"{{transactionDate}}\",\r\n            \"numAut\": \"250863\",\r\n            \"accountCode\": \"0037r972892475982475842\",\r\n            \"psp\": {\r\n                \"idChannel\": \"05963231005_01_ONUS\",\r\n                \"businessName\": \"Worldline Merchant Services Italia S.p.A.\",\r\n                \"serviceName\": \"Pagamento con Carte\"\r\n            },\r\n            \"origin\": \"IO\" // autenticato IO\r\n        },\r\n        \"wallet\": {\r\n            \"idWallet\": 125714007,\r\n            \"walletType\": \"Card\",\r\n            \"enableableFunctions\": [\r\n                \"pagoPA\",\r\n                \"BPD\",\r\n                \"FA\"\r\n            ],\r\n            \"pagoPa\": true,\r\n            \"onboardingChannel\": \"IO\",\r\n            \"favourite\": false,\r\n            \"createDate\": \"{{transactionDate}}\",\r\n            \"info\": {\r\n                \"type\": \"CardInfo\",\r\n                \"holder\": \"MARCO POLO\",\r\n                \"blurredNumber\": \"0403\",\r\n                \"hashPan\": \"e88aadfd9f40e1482615fd3c8c44f05c53f93aed1bcea69e82b3e5e27668f822\",\r\n                \"expireMonth\": \"06\",\r\n                \"expireYear\": \"2026\",\r\n                \"brand\": \"MASTERCARD\",\r\n                \"brandLogo\": \"https://wisp2.pagopa.gov.it/wallet/assets/img/creditcard/carta_visa.png\"\r\n            }\r\n        },\r\n        \"user\": {\r\n            \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\r\n            \"userId\": \"677676786\",\r\n            \"userStatus\": \"11\",\r\n            \"userStatusDescription\": \"REGISTERED_SPID\",\r\n            \"name\": \"MARCO\",\r\n            \"surname\": \"POLO\"\r\n        },\r\n        \"info\": {\r\n            \"brand\": \"MASTERCARD\",\r\n            \"brandLogo\": \"https://checkout.pagopa.it/assets/creditcard/mastercard.png\",\r\n            \"clientId\": \"CHECKOUT_FAKE\",\r\n            \"paymentMethodName\": \"CARDS\",\r\n            \"type\": \"CP\"\r\n        }\r\n    },\r\n    \"transferList\": [\r\n        {\r\n            \"fiscalCodePA\": \"00493410583\",\r\n            \"companyName\": \"ACI Automobile Club Italia\",\r\n            \"amount\": {{amountEur}},\r\n            \"transferCategory\": \"9/0301105TS/3/CB617RP\",\r\n            \"remittanceInformation\": \"/RFB/9600000000/TXT/CB617RP-Mag2022/Apr2023--EC Lorem-E. 261,92 (san 4,91 int 0,95)\"\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "https://{{namespace}}.servicebus.windows.net/{{eventHub}}/messages?timeout=60&api-version=2014-01",
                      "protocol": "https",
                      "host": [
                        "{{namespace}}",
                        "servicebus",
                        "windows",
                        "net"
                      ],
                      "path": [
                        "{{eventHub}}",
                        "messages"
                      ],
                      "query": [
                        {
                          "key": "timeout",
                          "value": "60"
                        },
                        {
                          "key": "api-version",
                          "value": "2014-01"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notices list Continuation-token",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "\r",
                          "if(jsonResponse.notices.length === 0){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[Get notices list - Check continuation token], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notices list - Check continuation token], expected is present\", () => {\r",
                          "        let header = pm.response.headers.get(\"x-continuation-token\");\r",
                          "\r",
                          "        pm.expect(header).to.not.eq(null);\r",
                          "        pm.expect(header).to.not.eq(\"\");\r",
                          "    })\r",
                          "\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "size",
                        "value": "1",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseurlArc}}/notices?size=1",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "1"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Disable notices",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Disable event from Biz-Events, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(()=>{}, 2000)"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-Key-bizevents-Notices}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "x-fiscal-code",
                        "value": "{{CF_MOCK_BE_ARC}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlBizEventsNotices}}/paids/{{eventId}}/disable",
                      "host": [
                        "{{baseUrlBizEventsNotices}}"
                      ],
                      "path": [
                        "paids",
                        "{{eventId}}",
                        "disable"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Unhappy Case",
          "item": [
            {
              "name": "NOTICE_NOT_FOUND_ERROR",
              "item": [
                {
                  "name": "[NOTICE_NOT_FOUND_EXCEPTION] noticedetails",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "\r",
                          "if(pm.response.code != 404){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "} else{\r",
                          "    pm.test(\"[Get notice details - NOTICE_NOT_FOUND_EXCEPTION] - When you retrieve the notice details from Biz-Event and it responds with not found, ARC returns a notice not found Exception , expected httpStatus: 404\", () => {\r",
                          "    pm.response.to.have.status(404);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice details- NOTICE_NOT_FOUND_EXCEPTION] - When you retrieve the notice details from Biz-Event and it responds with not found, ARC returns a notice not found Exception with expected error message and description , expected httpStatus: 404\",() =>{\r",
                          "    let response = pm.response.json();\r",
                          "    pm.expect(response.error).to.eq(\"notice_not_found_error\");\r",
                          "    pm.expect(response.error_description).to.contains(\"An error occurred handling request from biz-Events to retrieve paid notice with event id [3562] for the current user with userId\");\r",
                          "    })\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/3562",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "3562"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "RECEIPT_NOT_FOUND_ERROR",
              "item": [
                {
                  "name": "[RECEIPT_NOT_FOUND_EXCEPTION] notice receipt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "\r",
                          "if(pm.response.code != 404){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "} else{\r",
                          "    pm.test(\"[Get notice receipt- NOTICE_RECEIPT_NOT_FOUND_EXCEPTION] - When you retrieve the notice receipt from Biz-Event and it responds with not found, ARC returns a notice receipt not found Exception , expected httpStatus: 404\", () => {\r",
                          "    pm.response.to.have.status(404);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[Get notice receipt- NOTICE_RECEIPT_NOT_FOUND_EXCEPTION] - When you retrieve the notice receipt from Biz-Event and it responds with not found, ARC returns a notice receipt not found Exception with expected error message and description , expected httpStatus: 404\",() =>{\r",
                          "    let response = pm.response.json();\r",
                          "    pm.expect(response.error).to.eq(\"receipt_not_found_error\");\r",
                          "    pm.expect(response.error_description).to.contains(\"An error occurred handling request from biz-Events to retrieve notice receipt with event id [5914] for the current user with userId\");\r",
                          "    })\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/notices/5914/receipt",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "notices",
                        "5914",
                        "receipt"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "2. payment-notices",
      "item": [
        {
          "name": "setup",
          "item": [
            {
              "name": "getAccessToken",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "let jsonResponse = pm.response.json();\r",
                      "pm.environment.set(\"accessToken\", jsonResponse.accessToken);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseurlArcInternal}}/auth/testuser",
                  "host": [
                    "{{baseurlArcInternal}}"
                  ],
                  "path": [
                    "auth",
                    "testuser"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Happy Case",
          "item": [
            {
              "name": "Single Payment",
              "item": [
                {
                  "name": "1a. Create payment notice GPD 1 payment option",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "// IUPD\r",
                          "const base32Chars = '0123456789abcdefghijklmnopqrstuv';\r",
                          "let result = '';\r",
                          "\r",
                          "function generateRandomBase32String(length) {\r",
                          "    for (let i = 0; i < length; i++) {\r",
                          "        const randomIndex = Math.floor(Math.random() * base32Chars.length);\r",
                          "        result += base32Chars[randomIndex];\r",
                          "    }\r",
                          "    return result;\r",
                          "}\r",
                          "\r",
                          "let randomAlphaNumeric = generateRandomBase32String(32);\r",
                          "\r",
                          "pm.collectionVariables.set(\"iupd\", randomAlphaNumeric);\r",
                          "\r",
                          "//IUV\r",
                          "let iuv = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "\r",
                          "pm.collectionVariables.set(\"iuv\",iuv);\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amount\",amount);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[Create payment notice GPD - Single Payment Option], expected httpStatus: 201\", () => {\r",
                          "    if(pm.response.code === 201){\r",
                          "        pm.response.to.have.status(201);\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", true)\r",
                          "    }else {\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", false)\r",
                          "        pm.expect.fail(\"the debt position was not created\");\r",
                          "    }\r",
                          "    \r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"iupd\": \"77777777777-{{iupd}}\",\n    \"organizationFiscalCode\": \"77777777777\",\n    \"type\": \"F\",\n    \"companyName\": \"ACI\",\n    \"fullName\": \"MARCO POLO\",\n    \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\n    \"officeName\": null,\n    \"validityDate\": null,\n    \"switchToExpired\": false,\n    \"pull\":true,\n    \"paymentOption\": [\n        {\n            \"iuv\": \"020{{iuv}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amount}},\n            \"description\": \"Test Pull - unica opzione\",\n            \"isPartialPayment\": false,\n            \"dueDate\": \"2025-10-30T23:59:59\",\n            \"retentionDate\": \"2025-11-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"ACI Automobile Club Italia\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amount}},\n                    \"remittanceInformation\": \"Test Pull - unica opzione\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions?toPublish=true",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions"
                      ],
                      "query": [
                        {
                          "key": "toPublish",
                          "value": "true"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1b. GET payment notice from GPD",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from GPD - Single Payment Option], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from GPD - Single Payment Option] - When you get the payment notice, GPD return a payment notice\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOption).to.have.length(1);\r",
                          "        let amount = pm.collectionVariables.get(\"amount\")\r",
                          "        pm.expect(jsonResponse.paymentOption[0].amount).to.eq(amount);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1c. Risultato Pull",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(jsonResponse.length === 0 || !jsonResponse.some(po => po.iupd == iupd)) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - Single Payment Option], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - Single Payment Option] - When you get the payment notice, Pull Payment return a payment notice\", () => {\r",
                          "        pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let paymentNotice = jsonResponse.find(po => po.iupd == iupd);\r",
                          "\r",
                          "        pm.expect(paymentNotice.iupd).to.eq(iupd);\r",
                          "        pm.expect(paymentNotice.paymentOptions[0].numberOfInstallments).to.eq(1);\r",
                          "\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subcription-key-PullPayment}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-tax-code",
                        "value": "{{CF_MOCK_BE_ARC}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlPullPayment}}/payment-notices/v1",
                      "host": [
                        "{{baseUrlPullPayment}}"
                      ],
                      "path": [
                        "payment-notices",
                        "v1"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "50",
                          "disabled": true
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "disabled": true
                        },
                        {
                          "key": "dueDate",
                          "value": "2024-06-02",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Pull payment Notices from ARp",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(jsonResponse.paymentNotices.length === 0 || !jsonResponse.paymentNotices.some(po => po.iupd == iupd)) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from ARC - Single Payment Option], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from ARC - Single Payment Option] - When you get the payment notice, ARC return a payment notice\", () => {\r",
                          "        pm.expect(jsonResponse.paymentNotices).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let paymentNotice = jsonResponse.paymentNotices.find(po => po.iupd == iupd);\r",
                          "\r",
                          "        pm.expect(paymentNotice.iupd).to.eq(iupd);\r",
                          "        pm.expect(paymentNotice.paymentOptions[0].numberOfInstallments).to.eq(1);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment Notice details from ARp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice details from ARp - Single Payment Option], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice details from ARp - Single Payment Option] - When you get the payment notice, Arp return a payment notice details\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOptions).to.have.length(1);\r",
                          "        let amount = pm.collectionVariables.get(\"amount\")\r",
                          "        pm.expect(jsonResponse.paymentOptions[0].amount).to.eq(amount);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices/77777777777-{{iupd}}?paTaxCode=77777777777",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices",
                        "77777777777-{{iupd}}"
                      ],
                      "query": [
                        {
                          "key": "paTaxCode",
                          "value": "77777777777"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "delete debt position",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Delete payment notice, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Single Payment + payment installments",
              "item": [
                {
                  "name": "1a. Create payment notice GPD single payment + payment installments",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "// IUPD\r",
                          "const base32Chars = '0123456789abcdefghijklmnopqrstuv';\r",
                          "let result = '';\r",
                          "\r",
                          "function generateRandomBase32String(length) {\r",
                          "    for (let i = 0; i < length; i++) {\r",
                          "        const randomIndex = Math.floor(Math.random() * base32Chars.length);\r",
                          "        result += base32Chars[randomIndex];\r",
                          "    }\r",
                          "    return result;\r",
                          "}\r",
                          "\r",
                          "let randomAlphaNumeric = generateRandomBase32String(32);\r",
                          "\r",
                          "pm.collectionVariables.set(\"iupd\", randomAlphaNumeric);\r",
                          "\r",
                          "//IUV\r",
                          "let iuv = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuv\",iuv);\r",
                          "\r",
                          "let iuvFirstInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvFirstInstallment\",iuvFirstInstallment);\r",
                          "\r",
                          "let iuvSecondInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvSecondInstallment\",iuvSecondInstallment);\r",
                          "\r",
                          "let iuvThirdInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvThirdInstallment\",iuvThirdInstallment);\r",
                          "\r",
                          "\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amount\",amount);\r",
                          "\r",
                          "let amountFirstInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountFirstInstallment\",amountFirstInstallment);\r",
                          "\r",
                          "let amountSecondInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountSecondInstallment\",amountSecondInstallment);\r",
                          "\r",
                          "let amountThirdInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountThirdInstallment\",amountThirdInstallment);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[Create payment notice GPD - Single Payment Option], expected httpStatus: 201\", () => {\r",
                          "    if(pm.response.code === 201){\r",
                          "        pm.response.to.have.status(201);\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", true)\r",
                          "    }else {\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", false)\r",
                          "         pm.expect.fail(\"the debt position was not created\");\r",
                          "    }\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"iupd\": \"77777777777-{{iupd}}\",\n    \"organizationFiscalCode\": \"77777777777\",\n    \"type\": \"F\",\n    \"companyName\": \"EC Demo Pagamenti Pull Test\",\n    \"fullName\": \"MARCO POLO\",\n    \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\n    \"officeName\": null,\n    \"validityDate\": null,\n    \"switchToExpired\": false,\n    \"pull\":true,\n    \"paymentOption\": [\n        {\n            \"iuv\": \"020{{iuv}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amount}},\n            \"description\": \"Test Pull - opzione totale e piano rateale\",\n            \"isPartialPayment\": false,\n            \"dueDate\": \"2025-10-30T23:59:59\",\n            \"retentionDate\": \"2025-11-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amount}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvFirstInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountFirstInstallment}},\n            \"description\": \"Test Pull - opzione totale e piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-10-30T23:59:59\",\n            \"retentionDate\": \"2025-10-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountFirstInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvSecondInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountSecondInstallment}},\n            \"description\": \"Test Pull - opzione totale e piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-11-30T23:59:59\",\n            \"retentionDate\": \"2025-11-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountSecondInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvThirdInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountThirdInstallment}},\n            \"description\": \"Test Pull - opzione totale e piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-12-30T23:59:59\",\n            \"retentionDate\": \"2025-12-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountThirdInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions?toPublish=true",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions"
                      ],
                      "query": [
                        {
                          "key": "toPublish",
                          "value": "true"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1b. GET payment notice from GPD",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from GPD - Single Payment Option + payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from GPD - Single Payment Option + payment installments] - When you get the payment notice, GPD return a payment notice\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOption).to.have.length(4);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "    console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1c. Risultato Pull",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(jsonResponse.length === 0 || !jsonResponse.some(po => po.iupd == iupd)) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - Single Payment + payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - Single Payment + payment installments] - When you get the payment notice, Pull Payment return a payment notice\", () => {\r",
                          "        pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let paymentNotice = jsonResponse.find(po => po.iupd == iupd);\r",
                          "\r",
                          "        pm.expect(paymentNotice.iupd).to.eq(iupd);\r",
                          "        pm.expect(paymentNotice.paymentOptions[0].numberOfInstallments).to.eq(1);\r",
                          "        pm.expect(paymentNotice.paymentOptions[1].numberOfInstallments).to.eq(3);\r",
                          "\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subcription-key-PullPayment}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-tax-code",
                        "value": "{{CF_MOCK_BE_ARC}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlPullPayment}}/payment-notices/v1",
                      "host": [
                        "{{baseUrlPullPayment}}"
                      ],
                      "path": [
                        "payment-notices",
                        "v1"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "50",
                          "disabled": true
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "disabled": true
                        },
                        {
                          "key": "dueDate",
                          "value": "2024-06-02",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Pull payment Notices from ARp",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(pm.response.code != 200) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from ARC - Single Payment Option + payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from ARC - Single Payment Option + payment installments] - When you get the payment notice, ARC return a payment notice filtered\", () => {\r",
                          "        \r",
                          "        for (let i = 0; i < jsonResponse.paymentNotices.length; i++) {\r",
                          "            pm.expect(jsonResponse.paymentNotices[i].iupd).not.to.eq(iupd);\r",
                          "        }\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment Notice details from ARp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice details from ARp - Single Payment Option + payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice details from ARp - Single Payment Option + payment installments] - When you get the payment notice, Arp return a payment notice details\", () => {\r",
                          "       let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOptions).to.have.length(4);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices/77777777777-{{iupd}}?paTaxCode=77777777777",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices",
                        "77777777777-{{iupd}}"
                      ],
                      "query": [
                        {
                          "key": "paTaxCode",
                          "value": "77777777777"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "delete debt position",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Delete payment notice, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "payment with different dueDate",
              "item": [
                {
                  "name": "1a. Create payment notice GPD single payment + payment installments",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "// IUPD\r",
                          "const base32Chars = '0123456789abcdefghijklmnopqrstuv';\r",
                          "let result = '';\r",
                          "\r",
                          "function generateRandomBase32String(length) {\r",
                          "    for (let i = 0; i < length; i++) {\r",
                          "        const randomIndex = Math.floor(Math.random() * base32Chars.length);\r",
                          "        result += base32Chars[randomIndex];\r",
                          "    }\r",
                          "    return result;\r",
                          "}\r",
                          "\r",
                          "let randomAlphaNumeric = generateRandomBase32String(32);\r",
                          "\r",
                          "pm.collectionVariables.set(\"iupd\", randomAlphaNumeric);\r",
                          "\r",
                          "//IUV\r",
                          "let iuv = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuv\",iuv);\r",
                          "\r",
                          "let iuvFirstInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvFirstInstallment\",iuvFirstInstallment);\r",
                          "\r",
                          "let iuvSecondInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvSecondInstallment\",iuvSecondInstallment);\r",
                          "\r",
                          "let iuvThirdInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvThirdInstallment\",iuvThirdInstallment);\r",
                          "\r",
                          "\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amount\",amount);\r",
                          "\r",
                          "let amountFirstInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountFirstInstallment\",amountFirstInstallment);\r",
                          "\r",
                          "let amountSecondInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountSecondInstallment\",amountSecondInstallment);\r",
                          "\r",
                          "let amountThirdInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountThirdInstallment\",amountThirdInstallment);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[Create payment notice GPD - Single Payment Option], expected httpStatus: 201\", () => {\r",
                          "    if(pm.response.code === 201){\r",
                          "        pm.response.to.have.status(201);\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", true)\r",
                          "    }else {\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", false)\r",
                          "         pm.expect.fail(\"the debt position was not created\");\r",
                          "    }\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"iupd\": \"77777777777-{{iupd}}\",\n    \"organizationFiscalCode\": \"77777777777\",\n    \"type\": \"F\",\n    \"companyName\": \"EC Demo Pagamenti Pull Test\",\n    \"fullName\": \"MARCO POLO\",\n    \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\n    \"officeName\": null,\n    \"validityDate\": null,\n    \"switchToExpired\": false,\n    \"pull\":true,\n    \"paymentOption\": [\n         {\n            \"iuv\": \"020{{iuv}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amount}},\n            \"description\": \"Test Pull - opzioni con diverse scadenze\",\n            \"isPartialPayment\": false,\n            \"dueDate\": \"2025-10-30T23:59:59\",\n            \"retentionDate\": \"2025-10-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amount}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvFirstInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountFirstInstallment}},\n            \"description\": \"opzioni con diverse scadenze\",\n            \"isPartialPayment\": false,\n            \"dueDate\": \"2025-11-30T23:59:59\",\n            \"retentionDate\": \"2025-11-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountFirstInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvSecondInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountSecondInstallment}},\n            \"description\": \"opzioni con diverse scadenze\",\n            \"isPartialPayment\": false,\n            \"dueDate\": \"2025-12-30T23:59:59\",\n            \"retentionDate\": \"2025-12-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountSecondInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvThirdInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountThirdInstallment}},\n            \"description\": \"opzioni con diverse scadenze\",\n            \"isPartialPayment\": false,\n            \"dueDate\": \"2025-01-30T23:59:59\",\n            \"retentionDate\": \"2025-01-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountThirdInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions?toPublish=true",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions"
                      ],
                      "query": [
                        {
                          "key": "toPublish",
                          "value": "true"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1b. GET payment notice from GPD",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from GPD - payment with different dueDate], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from GPD - payment with different dueDate] - When you get the payment notice, GPD return a payment notice\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "         let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOption).to.have.length(4);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "    console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1c. Risultato Pull",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(jsonResponse.length === 0 || !jsonResponse.some(po => po.iupd == iupd)) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - payment with different dueDate], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - payment with different dueDate] - When you get the payment notice, Pull Payment return a payment notice\", () => {\r",
                          "        pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let paymentNotice = jsonResponse.find(po => po.iupd == iupd);\r",
                          "\r",
                          "        pm.expect(paymentNotice.iupd).to.eq(iupd);\r",
                          "        pm.expect(paymentNotice.paymentOptions[0].numberOfInstallments).to.eq(1);\r",
                          "\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subcription-key-PullPayment}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-tax-code",
                        "value": "{{CF_MOCK_BE_ARC}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlPullPayment}}/payment-notices/v1",
                      "host": [
                        "{{baseUrlPullPayment}}"
                      ],
                      "path": [
                        "payment-notices",
                        "v1"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "50",
                          "disabled": true
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "disabled": true
                        },
                        {
                          "key": "dueDate",
                          "value": "2024-06-02",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Pull payment Notices from ARp",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(pm.response.code != 200) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from ARC - payment with different dueDate], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from ARC - payment with different dueDate] - When you get the payment notice, ARC return a payment notice filtered\", () => {\r",
                          "        \r",
                          "        for (let i = 0; i < jsonResponse.paymentNotices.length; i++) {\r",
                          "            pm.expect(jsonResponse.paymentNotices[i].iupd).not.to.eq(iupd);\r",
                          "        }\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment Notice details from ARp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice details from ARp - payment with different dueDate], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice details from ARp - payment with different dueDate] - When you get the payment notice, Arp return a payment notice details\", () => {\r",
                          "       let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOptions).to.have.length(4);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices/77777777777-{{iupd}}?paTaxCode=77777777777",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices",
                        "77777777777-{{iupd}}"
                      ],
                      "query": [
                        {
                          "key": "paTaxCode",
                          "value": "77777777777"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "delete debt position",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Delete payment notice, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "4  payment installments",
              "item": [
                {
                  "name": "1a. Create payment notice GPD 4 payment installments",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "// IUPD\r",
                          "const base32Chars = '0123456789abcdefghijklmnopqrstuv';\r",
                          "let result = '';\r",
                          "\r",
                          "function generateRandomBase32String(length) {\r",
                          "    for (let i = 0; i < length; i++) {\r",
                          "        const randomIndex = Math.floor(Math.random() * base32Chars.length);\r",
                          "        result += base32Chars[randomIndex];\r",
                          "    }\r",
                          "    return result;\r",
                          "}\r",
                          "\r",
                          "let randomAlphaNumeric = generateRandomBase32String(32);\r",
                          "\r",
                          "pm.collectionVariables.set(\"iupd\", randomAlphaNumeric);\r",
                          "\r",
                          "//IUV\r",
                          "let iuv = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuv\",iuv);\r",
                          "\r",
                          "let iuvFirstInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvFirstInstallment\",iuvFirstInstallment);\r",
                          "\r",
                          "let iuvSecondInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvSecondInstallment\",iuvSecondInstallment);\r",
                          "\r",
                          "let iuvThirdInstallment = (Math.floor(Math.random()*(100000000000000 - 1)+1)).toString().padStart(14,'0');\r",
                          "pm.collectionVariables.set(\"iuvThirdInstallment\",iuvThirdInstallment);\r",
                          "\r",
                          "\r",
                          "\r",
                          "//Random Amount\r",
                          "let amount = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amount\",amount);\r",
                          "\r",
                          "let amountFirstInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountFirstInstallment\",amountFirstInstallment);\r",
                          "\r",
                          "let amountSecondInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountSecondInstallment\",amountSecondInstallment);\r",
                          "\r",
                          "let amountThirdInstallment = Math.floor(Math.random()*(1000 - 1)+1);\r",
                          "pm.collectionVariables.set(\"amountThirdInstallment\",amountThirdInstallment);\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[Create payment notice GPD - Single Payment Option], expected httpStatus: 201\", () => {\r",
                          "    if(pm.response.code === 201){\r",
                          "        pm.response.to.have.status(201);\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", true)\r",
                          "    }else {\r",
                          "        pm.collectionVariables.set(\"debtorPositionCreated\", false)\r",
                          "        pm.expect.fail(\"the debt position was not created\");\r",
                          "    }\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"iupd\": \"77777777777-{{iupd}}\",\n    \"organizationFiscalCode\": \"77777777777\",\n    \"type\": \"F\",\n    \"companyName\": \"EC Demo Pagamenti Pull Test\",\n    \"fullName\": \"MARCO POLO\",\n    \"fiscalCode\": \"{{CF_MOCK_BE_ARC}}\",\n    \"officeName\": null,\n    \"validityDate\": null,\n    \"switchToExpired\": false,\n    \"pull\":true,\n    \"paymentOption\": [\n         {\n            \"iuv\": \"020{{iuv}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amount}},\n            \"description\": \"Test Pull - piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-10-30T23:59:59\",\n            \"retentionDate\": \"2025-10-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amount}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvFirstInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountFirstInstallment}},\n            \"description\": \"Test Pull - piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-11-30T23:59:59\",\n            \"retentionDate\": \"2025-11-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountFirstInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvSecondInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountSecondInstallment}},\n            \"description\": \"Test Pull - piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-12-30T23:59:59\",\n            \"retentionDate\": \"2025-12-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountSecondInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        },\n        {\n            \"iuv\": \"020{{iuvThirdInstallment}}\",\n            \"organizationFiscalCode\": \"77777777777\",\n            \"amount\": {{amountThirdInstallment}},\n            \"description\": \"Test Pull - piano rateale\",\n            \"isPartialPayment\": true,\n            \"dueDate\": \"2025-01-30T23:59:59\",\n            \"retentionDate\": \"2025-01-30T23:59:59\",\n            \"paymentDate\": null,\n            \"reportingDate\": null,\n            \"paymentMethod\": \"CP\",\n            \"pspCompany\": null,\n            \"transfer\": [\n                {\n                    \"organizationFiscalCode\": \"77777777777\",\n                    \"companyName\": \"test\",\n                    \"idTransfer\": \"1\",\n                    \"amount\": {{amountThirdInstallment}},\n                    \"remittanceInformation\": \"Test Pull\",\n                    \"category\": \"9/0101108TS/\",\n                    \"iban\": \"IT39X0300203280451585346538\"\n                }\n            ]\n        }\n    ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions?toPublish=true",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions"
                      ],
                      "query": [
                        {
                          "key": "toPublish",
                          "value": "true"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1b. GET payment notice from GPD",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from GPD - 4 payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from GPD - 4 payment installments] - When you get the payment notice, GPD return a payment notice\", () => {\r",
                          "        let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOption).to.have.length(4);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "1c. Risultato Pull",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json(); \r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(jsonResponse.length === 0 || !jsonResponse.some(po => po.iupd == iupd)) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - 4 payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from Pull Payment - 4 payment installments] - When you get the payment notice, Pull Payment return a payment notice\", () => {\r",
                          "        pm.expect(jsonResponse).to.be.an('array').that.is.not.empty;\r",
                          "\r",
                          "        let paymentNotice = jsonResponse.find(po => po.iupd == iupd);\r",
                          "\r",
                          "        pm.expect(paymentNotice.iupd).to.eq(iupd);\r",
                          "        pm.expect(paymentNotice.paymentOptions[0].numberOfInstallments).to.eq(4);\r",
                          "\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subcription-key-PullPayment}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "x-tax-code",
                        "value": "{{CF_MOCK_BE_ARC}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrlPullPayment}}/payment-notices/v1",
                      "host": [
                        "{{baseUrlPullPayment}}"
                      ],
                      "path": [
                        "payment-notices",
                        "v1"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "50",
                          "disabled": true
                        },
                        {
                          "key": "page",
                          "value": "1",
                          "disabled": true
                        },
                        {
                          "key": "dueDate",
                          "value": "2024-06-02",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Pull payment Notices from ARp",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "if(pm.response.code != 200) {\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice from ARC - 4 payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice from ARC - 4 payment installments] - When you get the payment notice, ARC return a payment notice filtered\", () => {\r",
                          "        \r",
                          "        for (let i = 0; i < jsonResponse.paymentNotices.length; i++) {\r",
                          "            pm.expect(jsonResponse.paymentNotices[i].iupd).not.to.eq(iupd);\r",
                          "        }\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payment Notice details from ARp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "if(pm.response.code != 200 ){\r",
                          "    retryRequest(postman,pm,setTimeout);\r",
                          "}else{\r",
                          "    pm.test(\"[GET payment notice details from ARp - 4 payment installments], expected httpStatus: 200\", () => {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice details from ARp - 4 payment installments] - When you get the payment notice, Arp return a payment notice details\", () => {\r",
                          "       let jsonResponse = pm.response.json();\r",
                          "        let iupdWithoutOrganization = pm.collectionVariables.get(\"iupd\")\r",
                          "        let iupd = \"77777777777-\" + iupdWithoutOrganization\r",
                          "\r",
                          "        pm.expect(jsonResponse.iupd).to.eq(iupd);\r",
                          "        pm.expect(jsonResponse.paymentOptions).to.have.length(4);\r",
                          "    })\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices/77777777777-{{iupd}}?paTaxCode=77777777777",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices",
                        "77777777777-{{iupd}}"
                      ],
                      "query": [
                        {
                          "key": "paTaxCode",
                          "value": "77777777777"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "delete debt position",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Delete payment notice, expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "let debtorPositionCreated = pm.collectionVariables.get(\"debtorPositionCreated\");\r",
                          "\r",
                          "if(!debtorPositionCreated){\r",
                          "     console.info(\"The request\" + \" [\" + pm.info.requestName + \"] \"+ \"was skipped because the debt position was not created\");\r",
                          "    pm.execution.skipRequest();\r",
                          "}"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "value",
                          "value": "{{Apim-Subscription-key-GPD}}",
                          "type": "string"
                        },
                        {
                          "key": "key",
                          "value": "Ocp-Apim-Subscription-Key",
                          "type": "string"
                        },
                        {
                          "key": "in",
                          "value": "header",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrlGPD}}/organizations/77777777777/debtpositions/77777777777-{{iupd}}",
                      "host": [
                        "{{baseUrlGPD}}"
                      ],
                      "path": [
                        "organizations",
                        "77777777777",
                        "debtpositions",
                        "77777777777-{{iupd}}"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Unhappy Case",
          "item": [
            {
              "name": "PaymentNotice details",
              "item": [
                {
                  "name": "[BAD_REQUEST] Payment Notice details from ARp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " pm.test(\"[GET payment notice details from ARp - BAD_REQUEST], expected httpStatus: 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice details from ARp - BAD_REQUEST] - When you retrieve the payment notices details from GPD and it responds with bad request, ARp returns a invalid request Exception with expected error message and description , expected httpStatus: 400\",() =>{\r",
                          "    let response = pm.response.json();\r",
                          "    pm.expect(response.error).to.eq(\"invalid_request\");\r",
                          "    pm.expect(response.error_description).to.eq(\"One or more inputs provided during the request from GPD are invalid\");\r",
                          "    })"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices/77777777777-{{iupd}}?paTaxCode=%26",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices",
                        "77777777777-{{iupd}}"
                      ],
                      "query": [
                        {
                          "key": "paTaxCode",
                          "value": "&"
                        },
                        {
                          "key": "",
                          "value": null,
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "[NOT_FOUND] Payment Notice details from ARp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " pm.test(\"[GET payment notice details from ARp - NOT_FOUND], expected httpStatus: 404\", () => {\r",
                          "    pm.response.to.have.status(404);\r",
                          "    })\r",
                          "\r",
                          "    pm.test(\"[GET payment notice details from ARp - NOT_FOUND] - When you retrieve the payment notices details from GPD and it responds with not found, ARp returns a not found Exception with expected error message and description , expected httpStatus: 404\",() =>{\r",
                          "    let response = pm.response.json();\r",
                          "    pm.expect(response.error).to.eq(\"payment_notice_not_found_error\");\r",
                          "    pm.expect(response.error_description).to.eq(\"An error occurred handling request from GPD to retrieve payment notice with organizationFiscalCode [5452] and iupd [77777777777-cue7rlcqil9ln9f7knvubmkthi9plleq] for the current user with userId [123456]\");\r",
                          "    })"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/payment-notices/77777777777-{{iupd}}?paTaxCode=5452",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "payment-notices",
                        "77777777777-{{iupd}}"
                      ],
                      "query": [
                        {
                          "key": "",
                          "value": "",
                          "disabled": true
                        },
                        {
                          "key": "paTaxCode",
                          "value": "5452"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "[BAD_REQUEST] Pull payment Notices from ARC",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " pm.test(\"[GET payment notice from ARC - BAD_REQUEST], expected httpStatus: 400\", () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "    })\r",
                      "\r",
                      "    pm.test(\"[GET payment notice from ARC - BAD_REQUEST] - When you retrieve the payment notices from Pull Payment and it responds with bad request, ARC returns a invalid request Exception with expected error message and description , expected httpStatus: 400\",() =>{\r",
                      "    let response = pm.response.json();\r",
                      "    pm.expect(response.error).to.eq(\"invalid_request\");\r",
                      "    pm.expect(response.error_description).to.eq(\"One or more inputs provided during the request from pull payment are invalid\");\r",
                      "    })"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseurlArc}}/payment-notices?size=-3",
                  "host": [
                    "{{baseurlArc}}"
                  ],
                  "path": [
                    "payment-notices"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "-3"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "3. zendesk assistance",
      "item": [
        {
          "name": "setup",
          "item": [
            {
              "name": "getAccessToken",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "let jsonResponse = pm.response.json();\r",
                      "pm.environment.set(\"accessToken\", jsonResponse.accessToken);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseurlArcInternal}}/auth/testuser",
                  "host": [
                    "{{baseurlArcInternal}}"
                  ],
                  "path": [
                    "auth",
                    "testuser"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Happy Case",
          "item": [
            {
              "name": "GET JWT token for zendesk assistance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"[GET JWT token for zendesk assistance], expected httpStatus: 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"[GET JWT token for zendesk assistance], expected jwt token and return_to\", () =>{\r",
                      "    let jsonResponse = pm.response.json();\r",
                      "\r",
                      "    pm.expect(jsonResponse.assistanceToken).to.not.eq(null)\r",
                      "    pm.expect(jsonResponse.assistanceToken).to.not.eq(\"\")\r",
                      "    \r",
                      "    pm.expect(jsonResponse.returnTo).to.not.eq(null)\r",
                      "    pm.expect(jsonResponse.returnTo).to.not.eq(\"\")\r",
                      "    pm.expect(jsonResponse.returnTo).to.eq(\"https://pagamenti.assistenza.pagopa.it/hc/it/requests/new\")\r",
                      "\r",
                      "    pm.expect(jsonResponse.actionUrl).to.not.eq(null)\r",
                      "    pm.expect(jsonResponse.actionUrl).to.not.eq(\"\")\r",
                      "    pm.expect(jsonResponse.actionUrl).to.eq(\"https://pagopa.zendesk.com/access/jwt\")\r",
                      "})\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseurlArc}}/token/assistance?userEmail=someone@email.com",
                  "host": [
                    "{{baseurlArc}}"
                  ],
                  "path": [
                    "token",
                    "assistance"
                  ],
                  "query": [
                    {
                      "key": "userEmail",
                      "value": "someone@email.com"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Unhappy Case",
          "item": [
            {
              "name": "INVALID USER EMAIL",
              "item": [
                {
                  "name": "INVALID USER EMAIL ERROR",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[GET JWT token for zendesk assistance - INVALID USER EMAIL] - When you retrieve the JWT token for zendesk assistance and pass to ARC invalid email, ARC returns a invalid email Exception , expected httpStatus: 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "})\r",
                          "\r",
                          "pm.test(\"[GET JWT token for zendesk assistance - INVALID USER EMAIL] -When you retrieve the JWT token for zendesk assistance and pass to ARC invalid email, ARC returns a invalid email Exception with expected error message and description , expected httpStatus: 400\",() =>{\r",
                          "    let response = pm.response.json();\r",
                          "    pm.expect(response.error).to.eq(\"invalid_email\");\r",
                          "    pm.expect(response.error_description).to.eq(\"Invalid user email [someone]\");\r",
                          "})\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/token/assistance?userEmail=someone",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "token",
                        "assistance"
                      ],
                      "query": [
                        {
                          "key": "userEmail",
                          "value": "someone"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "4. auth",
      "item": [
        {
          "name": "setup",
          "item": [
            {
              "name": "getAccessToken",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "let jsonResponse = pm.response.json();\r",
                      "pm.environment.set(\"accessToken\", jsonResponse.accessToken);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseurlArcInternal}}/auth/testuser",
                  "host": [
                    "{{baseurlArcInternal}}"
                  ],
                  "path": [
                    "auth",
                    "testuser"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Unhappy Case",
          "item": [
            {
              "name": "Not Found",
              "item": [
                {
                  "name": "resource not found",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Request not found resourse, expected httpStatus: 404\", () => {\r",
                          "    pm.response.to.have.status(404);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/transactions4",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "transactions4"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Invalid State",
              "item": [
                {
                  "name": "invalid state",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Request cannot procced because state is wrong, expected httpStatus: 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "pm.environment.set(\"state\", \"1234567890\");\r",
                          "pm.environment.set(\"code\", \"1234567890\");"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/token/oneidentity?code={{code}}&state={{state}}",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "token",
                        "oneidentity"
                      ],
                      "query": [
                        {
                          "key": "code",
                          "value": "{{code}}"
                        },
                        {
                          "key": "state",
                          "value": "{{state}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Invalid Code",
              "item": [
                {
                  "name": "set state",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var redirectUrl = pm.response.headers.get('Location');\r",
                          "var parser = require('postman-collection').Url.parse;\r",
                          "\r",
                          "console.log(parser(redirectUrl));\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains state in query params, expected value to be not null\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"state\").value).not.equal(null);\r",
                          "    pm.environment.set(\"state\", parser(redirectUrl).query.find(a=>a.key===\"state\").value);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "followRedirects": false
                  },
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/login/oneidentity",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "login",
                        "oneidentity"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "invalid code",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "pm.environment.set(\"code\", \"1234567890\");"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Request cannot procced because code is wrong, expected httpStatus: 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/token/oneidentity?code={{code}}&state={{state}}",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "token",
                        "oneidentity"
                      ],
                      "query": [
                        {
                          "key": "code",
                          "value": "{{code}}"
                        },
                        {
                          "key": "state",
                          "value": "{{state}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Unauthorized",
              "item": [
                {
                  "name": "user info unauthorized",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Request cannot procced because code is wrong, expected httpStatus: 401\", () => {\r",
                          "    pm.response.to.have.status(401);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "followRedirects": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJ0eXAiOiJCZWFyZXIiLCJpc3MiOiJhcHBsaWNhdGlvbi1hdWRpZW5jZSIsImp0aSI6ImFhZmUzMGRiLTVlNDktNDc2ZS04YzhjLWU3OWJmNDk5YzJlNiIsImlhdCI6MTcyMzIxNzM4NCwiZXhwIjoxNzIzMjIwOTg0fQ.LFI0YFjS7bjv3VYGDTR3GgdPFbbUKrza2H8eeh7g6OtzBhcor0U0B_M_8LI98s-eob3TpWM9wq8zTwnvZtz_tmI37FU83RJF513Mrhi5YBYR8MI78XMSmRH7xRPIzlIAruCYbcv6JVs5daf7UKLjWGZWr3cXH7-TzWoA2OAE2MhzzI23R8b8pXDXrRearR5blyhEM1Wk4TRz3RZSksajGRQQ_gwO0K_8pT3zpk-hsZfWZ2iGwjWdKsTBwSmhYL68Qns2ic5McvM_gC5_xW3hrzqTP27NQJnkRjdT03uIFXkZSrLRBbgzPs286k4DiFaWMrASWofv35AQvqalUIXwmQ",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/auth/user",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "auth",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "user info without access token",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Request cannot procced because code is wrong, expected httpStatus: 401\", () => {\r",
                          "    pm.response.to.have.status(401);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "followRedirects": true
                  },
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/auth/user",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "auth",
                        "user"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Happy Case",
          "item": [
            {
              "name": "Case 1",
              "item": [
                {
                  "name": "login endpoint",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var redirectUrl = pm.response.headers.get('Location');\r",
                          "var parser = require('postman-collection').Url.parse;\r",
                          "\r",
                          "console.log(parser(redirectUrl));\r",
                          "\r",
                          "pm.test(\"Request login endpoint to the configured IDP, expected httpStatus: 302\", () => {\r",
                          "    pm.response.to.have.status(302);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirct is using HTTPS, expected HTTPS protcol\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).protocol).to.eql('https');\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains response_type in query params, expected 'code' url\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"response_type\").value).to.eql('code');\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains client_id in query params, expected value to be not null\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"client_id\").value).not.equal(null);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains scope in query params, expected value 'openid'\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"scope\").value).to.eql('openid');\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains state in query params, expected value to be not null\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"state\").value).not.equal(null);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains redirect_uri in query params, expected value to be not null\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"redirect_uri\").value).not.equal(null);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Make sure that redirect contains nonce in query params, expected value to be not null\", ()=>{\r",
                          "    pm.expect(parser(redirectUrl).query.find(a=>a.key===\"nonce\").value).not.equal(null);\r",
                          "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "followRedirects": false
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/login/oneidentity",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "login",
                        "oneidentity"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Case 2",
              "item": [
                {
                  "name": "user info",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"[Get User Info - Case 2], expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})\r",
                          "\r",
                          "pm.test(\"[Get User Info - Case 2] - When you get user info\", () => {\r",
                          "    pm.expect(jsonResponse).to.have.property(\"userId\");\r",
                          "    pm.expect(jsonResponse).to.have.property(\"fiscalCode\");\r",
                          "    pm.expect(jsonResponse).to.have.property(\"familyName\");\r",
                          "    pm.expect(jsonResponse).to.have.property(\"name\");\r",
                          "    pm.expect(jsonResponse).to.have.property(\"email\");\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "followRedirects": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{accessToken}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/auth/user",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "auth",
                        "user"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "case 3",
              "item": [
                {
                  "name": "logout",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[Logout - Case 3], expected httpStatus: 200\", () => {\r",
                          "    pm.response.to.have.status(200);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var path = pm.environment.get(\"baseurlArcInternal\");\r",
                          "\r",
                          "pm.sendRequest({\r",
                          "        url:  path + '/auth/testuser',\r",
                          "        method: 'GET',\r",
                          "        header: {\r",
                          "            'Accept': 'application/json',\r",
                          "            'Content-Type': 'application/json'\r",
                          "        }\r",
                          "    }, function (err, res) {\r",
                          "        if (res.code === 200) {\r",
                          "            let response = res.json();\r",
                          "            pm.environment.set('token', response.accessToken);\r",
                          "\r",
                          "            console.log('Token set: ' + response.accessToken);\r",
                          "        }\r",
                          "        else {\r",
                          "            console.log(res);\r",
                          "            throw new Error('Login failed with status: ' + res.status + ' (Code: ' + res.code + ')');\r",
                          "        }\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/logout",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "logout"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "user info",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "let jsonResponse = pm.response.json();\r",
                          "\r",
                          "pm.test(\"[Get User Info - Case 3], expected httpStatus: 401\", () => {\r",
                          "    pm.response.to.have.status(401);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "followRedirects": true
                  },
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/auth/user",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "auth",
                        "user"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "logout bad request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"[Logout - Case 3], expected httpStatus: 400\", () => {\r",
                          "    pm.response.to.have.status(400);\r",
                          "})"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseurlArc}}/logout",
                      "host": [
                        "{{baseurlArc}}"
                      ],
                      "path": [
                        "logout"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "retryRequest = (postman, pm, setTimeout, waitingMillis = 500, maxAttempts = 10) => {\r",
          "    if(!postman || !pm || !setTimeout){\r",
          "        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: postman=\" + postman + \", pm=\" + pm + \", setTimeout=\" + setTimeout)\r",
          "    }\r",
          " \r",
          "    const retryVariableName = \"retry_\" + pm.info.requestId\r",
          "    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;\r",
          "    if(attempt < maxAttempts) {\r",
          "        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");\r",
          "        pm.variables.set(retryVariableName, attempt)\r",
          "        pm.execution.setNextRequest(pm.info.requestId);\r",
          "        return setTimeout(()=>{}, waitingMillis);\r",
          "    } else {\r",
          "        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));\r",
          "    }\r",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "iupd",
      "value": ""
    },
    {
      "key": "iuv",
      "value": ""
    },
    {
      "key": "amount",
      "value": ""
    },
    {
      "key": "transactionId",
      "value": ""
    },
    {
      "key": "transactionDate",
      "value": ""
    },
    {
      "key": "amountEur",
      "value": ""
    },
    {
      "key": "amountCents",
      "value": ""
    },
    {
      "key": "fee",
      "value": ""
    },
    {
      "key": "totalAmount",
      "value": ""
    },
    {
      "key": "iuvFirstInstallment",
      "value": ""
    },
    {
      "key": "iuvSecondInstallment",
      "value": ""
    },
    {
      "key": "iuvThirdInstallment",
      "value": ""
    },
    {
      "key": "amountFirstInstallment",
      "value": ""
    },
    {
      "key": "amountSecondInstallment",
      "value": ""
    },
    {
      "key": "amountThirdInstallment",
      "value": ""
    },
    {
      "key": "token",
      "value": ""
    },
    {
      "key": "timestamp",
      "value": ""
    },
    {
      "key": "userid",
      "value": ""
    },
    {
      "key": "expires_in",
      "value": ""
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "eventId",
      "value": ""
    },
    {
      "key": "idPA",
      "value": ""
    },
    {
      "key": "companyName",
      "value": ""
    },
    {
      "key": "officeName",
      "value": ""
    },
    {
      "key": "eventId2",
      "value": ""
    },
    {
      "key": "amountCents2",
      "value": ""
    },
    {
      "key": "noticeDate",
      "value": ""
    },
    {
      "key": "debtorPositionCreated",
      "value": ""
    }
  ]
}